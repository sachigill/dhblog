[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "finalproj",
    "section": "",
    "text": "DH Blog Post\n\n\n\n\n\nTraffic Accident Analysis\n\n\n\n\n\nAug 5, 2024\n\n\nSachi Gill\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nAug 5, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nAug 2, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/final_proj.html",
    "href": "posts/final_proj.html",
    "title": "DH Blog Post",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\n\ntraffic_df = pd.read_csv('https://raw.githubusercontent.com/sachigill/dhfinalproject/main/traffic_accident_data.csv')\n\n\n#traffic_df['date'] = pd.to_datetime(accidents['date'])\n#traffic_df = traffic_df.dropna()\n# Descriptive statistics\n#descriptive_stats = traffic_df.describe()\n#print(descriptive_stats)\n\n#severity = traffic_df['Severity'].describe()\n#temperature = traffic_df['Temperature(F)'].describe()\n#precipitation = traffic_df['Precipitation(in)'].describe()\n\n#print(\"Severity Stats:\\n\", severity)\n#print(\"Temperature Stats:\\n\", temperature)\n#print(\"Precipitation Stats:\\n\", precipitation)\npd.set_option('display.max_columns', None)\nprint(traffic_df.head())\n\n\n\ntraffic_df['Wind_Speed(mph)'] = pd.to_numeric(traffic_df['Wind_Speed(mph)'], errors='coerce')\ntraffic_df['Precipitation(in)'] = pd.to_numeric(traffic_df['Precipitation(in)'], errors='coerce')\ntraffic_df['Temperature(F)'] = pd.to_numeric(traffic_df['Temperature(F)'], errors='coerce')\ntraffic_df['Humidity(%)'] = pd.to_numeric(traffic_df['Humidity(%)'], errors='coerce')\ntraffic_df['Visibility(mi)'] = pd.to_numeric(traffic_df['Visibility(mi)'], errors='coerce')\ndescriptive_stats = traffic_df[['Severity', 'Wind_Speed(mph)', 'Precipitation(in)', 'Temperature(F)', 'Humidity(%)', 'Visibility(mi)']].describe()\n\ndescriptive_stats\n\n          ID   Source  Severity           Start_Time             End_Time  \\\n0  A-2047758  Source2         2  2019-06-12 10:10:56  2019-06-12 10:55:58   \n1  A-4694324  Source1         2  2022-12-03 23:37:14   2022-12-04 1:56:53   \n2  A-5006183  Source1         2  2022-08-20 13:13:00  2022-08-20 15:22:45   \n3  A-4237356  Source1         2  2022-02-21 17:43:04  2022-02-21 19:43:23   \n4  A-6690583  Source1         2   2020-12-04 1:46:00   2020-12-04 4:13:09   \n\n   Start_Lat   Start_Lng    End_Lat     End_Lng  Distance(mi)  \\\n0  30.641211  -91.153481        NaN         NaN         0.000   \n1  38.990562  -77.399070  38.990037  -77.398282         0.056   \n2  34.661189 -120.492822  34.661189 -120.492442         0.022   \n3  43.680592  -92.993317  43.680574  -92.972223         1.054   \n4  35.395484 -118.985176  35.395476 -118.985995         0.046   \n\n                                         Description           Street  \\\n0  Accident on LA-19 Baker-Zachary Hwy at Lower Z...       Highway 19   \n1  Incident on FOREST RIDGE DR near PEPPERIDGE PL...  Forest Ridge Dr   \n2  Accident on W Central Ave from Floradale Ave t...    Floradale Ave   \n3  Incident on I-90 EB near REST AREA Drive with ...       14th St NW   \n4  RP ADV THEY LOCATED SUSP VEH OF 20002 - 726 CR...       River Blvd   \n\n          City            County State     Zipcode Country    Timezone  \\\n0      Zachary  East Baton Rouge    LA  70791-4610      US  US/Central   \n1     Sterling           Loudoun    VA  20164-2813      US  US/Eastern   \n2       Lompoc     Santa Barbara    CA       93436      US  US/Pacific   \n3       Austin             Mower    MN       55912      US  US/Central   \n4  Bakersfield              Kern    CA  93305-2649      US  US/Pacific   \n\n  Airport_Code    Weather_Timestamp  Temperature(F)  Wind_Chill(F)  \\\n0         KBTR   2019-06-12 9:53:00            77.0           77.0   \n1         KIAD  2022-12-03 23:52:00            45.0           43.0   \n2         KLPC  2022-08-20 12:56:00            68.0           68.0   \n3         KAUM  2022-02-21 17:35:00            27.0           15.0   \n4         KBFL   2020-12-04 1:54:00            42.0           42.0   \n\n   Humidity(%)  Pressure(in)  Visibility(mi) Wind_Direction  Wind_Speed(mph)  \\\n0         62.0         29.92            10.0             NW              5.0   \n1         48.0         29.91            10.0              W              5.0   \n2         73.0         29.79            10.0              W             13.0   \n3         86.0         28.49            10.0            ENE             15.0   \n4         34.0         29.77            10.0           CALM              0.0   \n\n   Precipitation(in) Weather_Condition  Amenity   Bump  Crossing  Give_Way  \\\n0                0.0              Fair    False  False     False     False   \n1                0.0              Fair    False  False     False     False   \n2                0.0              Fair    False  False     False     False   \n3                0.0        Wintry Mix    False  False     False     False   \n4                0.0              Fair    False  False     False     False   \n\n   Junction  No_Exit  Railway  Roundabout  Station   Stop  Traffic_Calming  \\\n0     False    False    False       False    False  False            False   \n1     False    False    False       False    False  False            False   \n2     False    False    False       False    False  False            False   \n3     False    False    False       False    False  False            False   \n4     False    False    False       False    False  False            False   \n\n   Traffic_Signal  Turning_Loop Sunrise_Sunset Civil_Twilight  \\\n0            True         False            Day            Day   \n1           False         False          Night          Night   \n2            True         False            Day            Day   \n3           False         False            Day            Day   \n4           False         False          Night          Night   \n\n  Nautical_Twilight Astronomical_Twilight  \n0               Day                   Day  \n1             Night                 Night  \n2               Day                   Day  \n3               Day                   Day  \n4             Night                 Night  \n\n\n\n\n\n\n\n\n\nSeverity\nWind_Speed(mph)\nPrecipitation(in)\nTemperature(F)\nHumidity(%)\nVisibility(mi)\n\n\n\n\ncount\n1499.000000\n1391.000000\n1027.000000\n1474.000000\n1471.000000\n1468.000000\n\n\nmean\n2.210140\n7.721783\n0.007653\n62.030122\n65.186268\n9.134475\n\n\nstd\n0.485302\n5.341519\n0.058991\n18.640740\n22.755323\n2.500550\n\n\nmin\n1.000000\n0.000000\n0.000000\n-35.000000\n6.000000\n0.000000\n\n\n25%\n2.000000\n4.600000\n0.000000\n50.000000\n48.000000\n10.000000\n\n\n50%\n2.000000\n7.000000\n0.000000\n64.000000\n67.000000\n10.000000\n\n\n75%\n2.000000\n10.400000\n0.000000\n76.000000\n85.000000\n10.000000\n\n\nmax\n4.000000\n32.200000\n1.360000\n111.000000\n100.000000\n45.000000\n\n\n\n\n\n\n\n\nweather_condition = traffic_df['Weather_Condition'].dropna().unique()\nprint(\"Weather Conditions:\", weather_condition)\n\n\nprint(\"Number of Unique Weather Conditions:\", len(weather_condition))\n\nWeather Conditions: ['Fair' 'Wintry Mix' 'Light Rain' 'Cloudy' 'Mostly Cloudy' 'Partly Cloudy'\n 'Clear' 'Scattered Clouds' 'Fog' 'Overcast' 'Light Snow' 'T-Storm'\n 'Thunderstorms and Rain' 'Thunder' 'Light Rain with Thunder' 'Rain'\n 'Showers in the Vicinity' 'Mostly Cloudy / Windy' 'Heavy Rain'\n 'Cloudy / Windy' 'Light Drizzle' 'Heavy T-Storm' 'Light Rain / Windy'\n 'Smoke' 'Haze' 'Blowing Dust / Windy' 'N/A Precipitation'\n 'Thunder in the Vicinity' 'Snow' 'Heavy Thunderstorms and Rain'\n 'Shallow Fog' 'Light Freezing Drizzle' 'Fair / Windy' 'Patches of Fog'\n 'Light Snow / Windy' 'Blowing Snow / Windy' 'Thunderstorm' 'Drizzle'\n 'T-Storm / Windy' 'Partly Cloudy / Windy']\nNumber of Unique Weather Conditions: 40\n\n\n\nplt.figure(figsize=(12, 8))\ntraffic_df['Weather_Condition'].value_counts().plot(kind='bar')\nplt.xlabel('Weather Condition')\nplt.ylabel('Number of Accidents')\nplt.title('Accidents by Weather Condition')\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom wordcloud import WordCloud\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\nnltk.download('stopwords')\nstop_words = set(stopwords.words('english'))\n\ncustom_stop_words = {'due', 'accident', 'ca'}\nstop_words.update(custom_stop_words)\n\ntraffic_df['Description'] = traffic_df['Description'].astype(str)\n\ndef text_process(description, stop_words):\n  description = description.lower()\n  #description = re.sub(r'\\d+', '', description)\n  #description = re.sub(r'[^\\w\\s]', '', description)\n  words = description.split()\n    # Remove stop words\n  words_no_stop = [w for w in words if w not in stop_words]\n    # Join words back into a single string\n  return ' '.join(words_no_stop)\n\ntraffic_df['description_final'] = traffic_df['Description'].apply(lambda x: text_process(x, stop_words))\n\n# Combine all descriptions into a single string\nall_descriptions = ' '.join(traffic_df['description_final'])\n\n# Generate the word cloud\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_descriptions)\n\n# Display the word cloud\nplt.figure(figsize=(10, 5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.title('Word Cloud of Traffic Accident Descriptions')\nplt.show()\n\n[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\n\n\n\n\n\n\n\n\ncounty = 'Los Angeles'\ntraffic_df_location = traffic_df[traffic_df['County'] == county]\n\n\ntraffic_df['description_final'] = traffic_df['Description'].apply(lambda x: text_process(x, stop_words))\n\nall_descriptions_location = ' '.join(traffic_df_location['description_final'])\n\n\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_descriptions_location)\n\n\nplt.figure(figsize=(8, 5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.title(f'Common words in Traffic Accident Descriptions in Los Angeles County')\nplt.show()\n\n\n\n\n\n\n\n\n\ncounty = 'New York'\ntraffic_df_location = traffic_df[traffic_df['County'] == county]\n\n\ntraffic_df['description_final'] = traffic_df['Description'].apply(lambda x: text_process(x, stop_words))\n\n\n\nall_descriptions_location = ' '.join(traffic_df_location['description_final'])\n\n\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_descriptions_location)\n\n\nplt.figure(figsize=(8, 5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.title(f'Common words in Traffic Accident Descriptions in New York County')\nplt.show()\n\n\n\n\n\n\n\n\n\ncounty = 'San Francisco'\ntraffic_df_location = traffic_df[traffic_df['County'] == county]\n\n\ntraffic_df['description_final'] = traffic_df['Description'].apply(lambda x: text_process(x, stop_words))\n\n\n\nall_descriptions_location = ' '.join(traffic_df_location['description_final'])\n\n\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_descriptions_location)\n\n\nplt.figure(figsize=(18, 5))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.title(f'Common words in Traffic Accident Descriptions in SF County')\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\ntraffic_df['Month'] = traffic_df['Start_Time'].dt.month\n\n#grouping by month and count the number of accidents\naccident_per_month = traffic_df.groupby('Month').size().reset_index(name='Number_of_Accidents')\n\n\n\n# Sort the DataFrame by month for proper order in the plot\naccident_per_month = accident_per_month.sort_values('Month')\n\n\nplt.figure(figsize=(14, 8))\nplt.bar(accident_per_month['Month'], accident_per_month['Number_of_Accidents'], color='purple')\nplt.xlabel('Month', fontsize=16)\nplt.ylabel('Number of Accidents', fontsize=16)\nplt.title('Number of Accidents by Month', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()\n\n\n\n\n\n\n\n\n\naccident_per_state = traffic_df.groupby('State').size().reset_index(name='Number_of_Accidents')\n\n\naccident_per_state = accident_per_state.sort_values('Number_of_Accidents', ascending=False)\n\n\nplt.figure(figsize=(20, 8))\nplt.bar(accident_per_state['State'], accident_per_state['Number_of_Accidents'], color='skyblue')\nplt.xlabel('State', fontsize=16)\nplt.ylabel('Number of Accidents', fontsize=16)\nplt.title('Number of Accidents by State', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(10, 6))\nplt.hist(traffic_df['Severity'], bins=range(1, 6), edgecolor='black', color='blue')\nplt.xlabel('Severity', fontsize=14)\nplt.ylabel('Frequency', fontsize=14)\nplt.title('Distribution of Accident Severity', fontsize=16)\nplt.xticks(range(1, 6))\nplt.show()\n\n\n\n\n\n\n\n\n\nseverity_by_state = traffic_df.groupby('State')['Severity'].mean().reset_index()\n\n# Sort by severity for better visualization\nseverity_by_state = severity_by_state.sort_values(by='Severity', ascending=False)\n\n# Plot the bar chart\nplt.figure(figsize=(14, 8))\nplt.bar(severity_by_state['State'], severity_by_state['Severity'], color='skyblue', edgecolor='black')\nplt.xlabel('State', fontsize=15)\nplt.ylabel('Average Severity of Accidents', fontsize=15)\nplt.title('Average Severity of Accidents by State', fontsize=20)\nplt.xticks(rotation=90, fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\n\n\n\n\n\n\n\n\n\navg_severity_by_weather = traffic_df.groupby('Weather_Condition')['Severity'].mean().reset_index()\navg_severity_by_weather = avg_severity_by_weather.sort_values(by='Severity', ascending=False)\n\n# Bar plot for average severity by weather condition\nplt.figure(figsize=(41, 20))\nplt.bar(avg_severity_by_weather['Weather_Condition'], avg_severity_by_weather['Severity'], color='skyblue')\nplt.xlabel('Weather Condition', fontsize = 25)\nplt.ylabel('Average Accident Severity')\nplt.title('Average Accident Severity by Weather Condition', fontsize=35)\nplt.xticks(rotation=50)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Wind_Speed(mph)'] = pd.to_numeric(traffic_df['Wind_Speed(mph)'], errors='coerce')\ntraffic_df = traffic_df.dropna(subset=['Wind_Speed(mph)'])\n\n# Group by windspeed and count the number of accidents\nwindspeed_accidents = traffic_df.groupby('Wind_Speed(mph)').size().reset_index(name='Number_of_Accidents')\n\n# Plot the data\nplt.figure(figsize=(14, 8))\nplt.plot(windspeed_accidents['Wind_Speed(mph)'], windspeed_accidents['Number_of_Accidents'], marker='o', linestyle='-', color='blue')\nplt.xlabel('Wind Speed (mph)', fontsize=15)\nplt.ylabel('Number of Accidents', fontsize=15)\nplt.title('Number of Accidents by Wind Speed', fontsize=20)\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Severity'] = pd.to_numeric(traffic_df['Severity'], errors='coerce')\ntraffic_df['Wind_Speed(mph)'] = pd.to_numeric(traffic_df['Wind_Speed(mph)'], errors='coerce')\n\n\ntraffic_df = traffic_df.dropna(subset=['Severity', 'Wind_Speed(mph)'])\n\n#grouping by wind speed and figuring out the avg severity\nseverity_by_wind_speed = traffic_df.groupby('Wind_Speed(mph)')['Severity'].mean().reset_index()\n\n\nplt.figure(figsize=(14, 8))\nplt.plot(severity_by_wind_speed['Wind_Speed(mph)'], severity_by_wind_speed['Severity'], marker='o', linestyle='-', color='blue')\nplt.xlabel('Wind Speed (mph)', fontsize=15)\nplt.ylabel('Average Severity of Accidents', fontsize=15)\nplt.title('Average Severity of Accidents by Wind Speed', fontsize=20)\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Precipitation(in)'] = pd.to_numeric(traffic_df['Precipitation(in)'], errors='coerce')\ntraffic_df = traffic_df.dropna(subset=['Precipitation(in)'])\n\n# Group by windspeed and count the number of accidents\nwindspeed_accidents = traffic_df.groupby('Precipitation(in)').size().reset_index(name='Number_of_Accidents')\n\n# Plot the data\nplt.figure(figsize=(14, 8))\nplt.plot(windspeed_accidents['Precipitation(in)'], windspeed_accidents['Number_of_Accidents'], marker='o', linestyle='-', color='purple')\nplt.xlabel('Precipitation(in)', fontsize=15)\nplt.ylabel('Number of Accidents', fontsize=15)\nplt.title('Number of Accidents by Precipitation (in)', fontsize=20)\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Extract the year from the date column\ntraffic_df['Year'] = traffic_df['Start_Time'].dt.year\n\n# Define the weather conditions you want to plot\nweather_conditions = ['Overcast', 'Fair', 'Heavy Rain', 'Cloudy', 'Rain', 'Mostly Cloudy', 'Fog']\n\n# Create a dictionary to store data for each weather condition\nweather_data = {}\n\nfor condition in weather_conditions:\n    # Filter the dataset for the current weather condition\n    condition_df = traffic_df[traffic_df['Weather_Condition'] == condition]\n    # Group by year and count the number of accidents\n    condition_per_year = condition_df.groupby('Year').size().reset_index(name='Number_of_Accidents')\n    # Store the result in the dictionary\n    weather_data[condition] = condition_per_year\n\n# Create the line graph using matplotlib\nplt.figure(figsize=(14, 8))\n\nfor condition, data in weather_data.items():\n    plt.plot(data['Year'], data['Number_of_Accidents'], marker='o', linestyle='-', label=condition)\n\nplt.xlabel('Year', fontsize=16)\nplt.ylabel('Number of Accidents', fontsize=16)\nplt.title('Number of Accidents per Year for Different Weather Conditions', fontsize=20)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.grid(True)  # Add grid for better readability\nplt.legend(title='Weather Condition', fontsize=12)  # Add a legend\nplt.show()\n\n\n\n\n\n\n\n\n\nstop_words = set(stopwords.words('english'))\n\n# Add custom stopwords\ncustom_stop_words = {'due', 'accident', 'near', 'at', 'from', 'involved', 'on', 'the', 'and', 'a', 'to','ca', 'fl', 'ny', 'w', 'e', 'n', 'tx'}\nstop_words.update(custom_stop_words)\n\n\n\n# List of states to analyze\nstates_to_analyze = ['CA', 'TX', 'FL', 'NY', 'NV', 'AZ']  # Example states: California, Texas, Florida\n\n# Filter the DataFrame to include only these states\nfiltered_df = traffic_df[traffic_df['State'].isin(states_to_analyze)]\n\n# Define the number of rows and columns for subplots\nnum_states = len(states_to_analyze)\nnum_cols = 1\nnum_rows = num_states\n\n# Create subplots\nfig, axs = plt.subplots(num_rows, num_cols, figsize=(10, num_rows * 5))\nfig.suptitle('Common Words in Traffic Accident Descriptions by Selected States', fontsize=20)\n\nfor i, state in enumerate(states_to_analyze):\n    state_df = filtered_df[filtered_df['State'] == state]\n    descriptions = ' '.join(state_df['Description'].dropna()).lower()\n    words = re.findall(r'\\b\\w+\\b', descriptions)  # Extract words only\n    words = [word for word in words if word not in stop_words]  # Remove stopwords\n    common_words_counts = Counter(words).most_common(10)\n    \n    common_words = [word for word, count in common_words_counts]\n    counts = [count for word, count in common_words_counts]\n\n    ax = axs[i]\n    ax.barh(common_words, counts, color='skyblue')\n    ax.set_title(state)\n    ax.invert_yaxis()\n\nplt.tight_layout(rect=[0, 0, 1, 0.95])\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Month'] = traffic_df['Start_Time'].dt.month\n\n# Group by month and calculate the mean severity\navg_severity_by_month = traffic_df.groupby('Month')['Severity'].mean().reset_index()\n\n# Map month numbers to month names for better readability\nmonth_names = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',\n               7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}\navg_severity_by_month['Month'] = avg_severity_by_month['Month'].map(month_names)\n\n# Create the bar plot using matplotlib\nplt.figure(figsize=(14, 8))\nplt.bar(avg_severity_by_month['Month'], avg_severity_by_month['Severity'], color='skyblue', edgecolor='black')\nplt.xlabel('Month', fontsize=16)\nplt.ylabel('Average Accident Severity', fontsize=16)\nplt.title('Average Accident Severity by Month', fontsize=20)\nplt.xticks(rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Extract the hour from the date column\ntraffic_df['Hour'] = traffic_df['Start_Time'].dt.hour\n\n# Group by hour and calculate the mean severity\navg_severity_by_hour = traffic_df.groupby('Hour')['Severity'].mean().reset_index()\n\n# Sort the DataFrame by severity in descending order\navg_severity_by_hour = avg_severity_by_hour.sort_values(by='Severity', ascending=False)\n\n# Create the bar plot using matplotlib\nplt.figure(figsize=(14, 8))\nplt.bar(avg_severity_by_hour['Hour'].astype(str), avg_severity_by_hour['Severity'], color='skyblue', edgecolor='black')\nplt.xlabel('Hour of the Day', fontsize=16)\nplt.ylabel('Average Accident Severity', fontsize=16)\nplt.title('Average Accident Severity by Hour of the Day', fontsize=20)\nplt.xticks(rotation=45, fontsize=14)  # Set x-ticks from 0 to 23\nplt.yticks(fontsize=14)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Extract the hour from the date column\ntraffic_df['Hour'] = traffic_df['Start_Time'].dt.hour\n\n# Group by hour and count the number of accidents\naccidents_per_hour = traffic_df.groupby('Hour').size().reset_index(name='Number_of_Accidents')\n\n# Sort the DataFrame by number of accidents in descending order\naccidents_per_hour = accidents_per_hour.sort_values(by='Number_of_Accidents', ascending=False)\n\n# Create the bar plot using matplotlib\nplt.figure(figsize=(14, 8))\nplt.bar(accidents_per_hour['Hour'].astype(str), accidents_per_hour['Number_of_Accidents'], color='skyblue', edgecolor='black')\nplt.xlabel('Hour of the Day', fontsize=16)\nplt.ylabel('Number of Accidents', fontsize=16)\nplt.title('Number of Accidents by Hour of the Day', fontsize=20)\nplt.xticks(rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\n\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Extract the hour from the date column\ntraffic_df['Hour'] = traffic_df['Start_Time'].dt.hour\n\n# Group by hour and severity and count the number of accidents\nhourly_severity_counts = traffic_df.groupby(['Hour', 'Severity']).size().unstack(fill_value=0)\n\n# Plot the stacked bar chart\nhourly_severity_counts.plot(kind='bar', stacked=True, figsize=(14, 8), color=['skyblue', 'orange', 'green', 'red'])\nplt.xlabel('Hour of the Day', fontsize=16)\nplt.ylabel('Number of Accidents', fontsize=16)\nplt.title('Number of Accidents by Hour of the Day and Severity', fontsize=20)\nplt.legend(title='Severity', fontsize=12)\nplt.xticks(rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(14, 8))\nplt.hist(traffic_df['Sunrise_Sunset'], bins=2, color='blue', edgecolor='black')\nplt.xlabel('Time of Day', fontsize=15)\nplt.ylabel('Number of Accidents', fontsize=15)\nplt.title('Number of Accidents in Day vs Night', fontsize=24)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Extract the month from the date column\ntraffic_df['Month'] = traffic_df['Start_Time'].dt.month\n\n# Group by month and severity and count the number of accidents\nmonthly_severity_counts = traffic_df.groupby(['Month', 'Severity']).size().unstack(fill_value=0)\n\n# Map month numbers to month names for better readability\nmonth_names = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June',\n               7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}\nmonthly_severity_counts.index = monthly_severity_counts.index.map(month_names)\n\n# Plot the stacked bar chart\nmonthly_severity_counts.plot(kind='bar', stacked=True, figsize=(14, 8), color=['skyblue', 'orange', 'green', 'red'])\nplt.xlabel('Month', fontsize=16)\nplt.ylabel('Number of Accidents', fontsize=16)\nplt.title('Number of Accidents by Month and Severity', fontsize=20)\nplt.legend(title='Severity', fontsize=12)\nplt.xticks(rotation=45, fontsize=14)\nplt.yticks(fontsize=14)\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Group by city and state and count the number of accidents\ncity_state_accidents = traffic_df.groupby(['City', 'State']).size().reset_index(name='Number_of_Accidents')\n\n# Group by city and state and calculate the mean severity\ncity_state_severity = traffic_df.groupby(['City', 'State'])['Severity'].mean().reset_index(name='Average_Severity')\n\n# Find the city and state with the highest number of accidents\ntop_city_state_accidents = city_state_accidents.sort_values(by='Number_of_Accidents', ascending=False).head(10)\n\n# Find the city and state with the highest severity of accidents\ntop_city_state_severity = city_state_severity.sort_values(by='Average_Severity', ascending=False).head(10)\n\n# Plot the city and state with the highest number of accidents\nplt.figure(figsize=(14, 8))\nplt.barh(top_city_state_accidents.apply(lambda x: f\"{x['City']}, {x['State']}\", axis=1), \n         top_city_state_accidents['Number_of_Accidents'], color='skyblue')\nplt.xlabel('Number of Accidents', fontsize=15)\nplt.ylabel('City, State', fontsize=15)\nplt.title('Top 10 Cities with the Highest Number of Accidents', fontsize=20)\nplt.gca().invert_yaxis()\nplt.show()\n\n# Plot the city and state with the highest severity of accidents\nplt.figure(figsize=(14, 8))\nplt.barh(top_city_state_severity.apply(lambda x: f\"{x['City']}, {x['State']}\", axis=1), \n         top_city_state_severity['Average_Severity'], color='red')\nplt.xlabel('Average Severity of Accidents', fontsize=15)\nplt.ylabel('City, State', fontsize=15)\nplt.title('Top 10 US Cities with the Highest Severity of Accidents', fontsize=20)\nplt.gca().invert_yaxis()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'])\n\n\n\n# Extract year, month, and day from the 'date' column\ntraffic_df['year'] = traffic_df['Start_Time'].dt.year\ntraffic_df['month'] = traffic_df['Start_Time'].dt.month\ntraffic_df['day'] = traffic_df['Start_Time'].dt.day\n\n# Group by year and month and count the number of accidents\naccidents_per_month = traffic_df.groupby(['year', 'month']).size().reset_index(name='number_of_accidents')\n\n# Create a datetime column for plotting\naccidents_per_month['Start_Time'] = pd.to_datetime(accidents_per_month[['year', 'month']].assign(day=1))\n\n\n\n\n# Plot the number of accidents over time\nplt.figure(figsize=(14, 8))\nplt.plot(accidents_per_month['Start_Time'], accidents_per_month['number_of_accidents'], marker='o')\nplt.xlabel('Date')\nplt.ylabel('Number of Accidents')\nplt.title('Number of Accidents Over Time')\nplt.xticks(rotation=45)\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\ntraffic_df['Start_Time'] = pd.to_datetime(traffic_df['Start_Time'], errors='coerce')\n\n# Drop rows with NaT values in 'Start_Time'\ntraffic_df = traffic_df.dropna(subset=['Start_Time'])\n\n# Define the periods\ntraffic_df['Time Period'] = ['Pre-COVID' if date &lt; pd.Timestamp('2020-03-01') else 'Post-COVID' for date in traffic_df['Start_Time']]\n\n# Extract year-month for trend analysis\ntraffic_df['YearMonth'] = traffic_df['Start_Time'].dt.to_period('M')\n\n# Calculate mean severity for each month\nmonthly_severity = traffic_df.groupby(['YearMonth', 'Time Period'])['Severity'].mean().unstack('Time Period')\n\n# Create line plot for monthly trend\nplt.figure(figsize=(14, 8))\nmonthly_severity.plot(kind='line', marker='o', ax=plt.gca())\nplt.xlabel('Date', fontsize=16)\nplt.ylabel('Mean Accident Severity', fontsize=16)\nplt.title('Monthly Trend of Accident Severity Before and After COVID-19', fontsize=20)\nplt.legend(title='Period')\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]